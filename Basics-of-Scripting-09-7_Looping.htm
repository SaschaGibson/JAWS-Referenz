<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<title>9.7 Looping</title>
<LINK rel="StyleSheet" href="default.css">
</head>

<body>
<h1>9.7 Looping</h1>

<p>You can use the iterative statement structure to perform the same statement
or group of statements repeatedly while a condition is true. This type of flow
control is also referred to as &quot;looping&quot;. You can use a loop in your
script to perform a sequence of statements several times. A loop essentially
shortens the number of statements required. Looping provides a way to determine
the number of repetitions automatically, based on evaluations made in your
script.</p>

<h2>The While-EndWhile Statement Structure</h2>

<p>You use the While-EndWhile statement structure to
perform Looping. A While Loop repeats or loops WHILE a condition is true. A
While loop consists of three parts: </p>

<ul>
 <li>The While key word that begins the loop</li>
 <li>the condition to be tested each time the loop iterates or is performed</li>
 <li>the EndWhile key word that ends the loop</li>
</ul>

<p>JAWS performs all statements within the boundaries of the While and EndWhile key words repeatedly until the condition in the
While statement becomes false.</p>

<h3>Example 1: While-EndWhile loop structure</h3>

<p class="Code">Var<br>
Int iCount<br>
let iCount = 1 ;Assign the value of 1 to the variable<br>
While iCount &lt; 5 ; this loop will be performed 4 times<br>
; Statements to be performed go here<br>
Let iCount = iCount + 1 ; Increases the value of iCount so the While condition will become false after 4 iterations<br>
EndWhile</p>

<p>In the above example, JAWS performs the While loop while iCount
is less than five. Once the value of iCount becomes equal to 5, the loop ends and no further processing occurs.</p>

<h2>The For-EndFor Statement Structure</h3>
<p>Another method of performing looping in your scripts is by using the For-EndFor looping statements. Similar to a While loop, a For loop consists of three parts: the keyword For that starts the loop, the condition being tested, and the EndFor keyword that terminates the loop. JAWS performs all statements found in the boundaries of the loop as long as the loop condition is true. An example of the syntax of a For loop follows.</p>
<p class="code">
For x = Start to End<br>
...Statements to be performed go here<br>
EndFor</p>

<p>The value of x must be an integer variable and the values of Start and End must be integers, integer variables, or integer constants. The major difference between the While and For looping structures is that a For loop will run a predetermined number of times. An example of the use of a For loop follows.</p>
<p class="code">
Var<br>
int iCounter<br>
For iCounter = 1 to 10; Loop will execute 10 times<br>
SayInteger(iCounter); Speak the value of the iCounter variable<br>
EndFor</p>

<p>In the above example the For loop will execute ten times. As set by the For statement, the iCounter variable starts with a value of 1 and increments by 1 each time the loop executes. Notice that the iCounter variable is automatically incremented each time the loop executes. At the end of the tenth loop iteration the value of icounter becomes 11 and the For statement is no longer true thus ending the loop. Each time the loop executes the SayInteger function speaks the value of iCounter. When this script is run you will hear JAWS count from one to ten.</p>

<p class="Note"><b>NOTE:</b> Since a loop continues until a condition becomes false, you must be careful not to set up a loop with a condition that will never become false. To do so would create an infinite loop, which will cycle forever, and lock up the computer until the program is terminated manually.  Think carefully about the condition meant to terminate the loop to be sure it will become false at some time.  If you find that the computer seems to lock up after you execute a new script with a While loop in it, this is probably what is happening. For loops are less likely to cause an infinite loop because beginning and ending values are explicitly set in the For statement.</p>

<h2>Avoiding Infinite Loops</h2>

<p>When you use a While loop in your script, care should be taken not to create
an infinite loop. An infinite loop occurs when the condition in the While
statement is not satisfied. The loop will continue to run until you manually
end the program. This often causes a computer to lock up and may require the
computer be restarted. Since JAWS performs a loop until a condition is met, you
must be certain that the condition being tested can be satisfied. One way to
avoid this problem while designing While loops is to include statements
designed to end the loop after a certain number of repetitions.</p>

<h3>Example 2: Ending a loop after a certain number of iterations</h3>

<p class="Code">Var<br>
int iSafety<br>
Let iSafety = 1<br>
While iSafety &lt; 10<br>
; Loop statements go here<br>
Let iSafety = iSafety + 1 ; Increase the value of iSafety by one so it will eventually reach ten and end the loop<br>
EndWhile</p>

<p>In the above example, the iSafety variable is
initialized to the value of 1. </p>

<ul>
 <li>The loop checks the value of the iSafety variable each time it repeats.</li>
 <li>Inside the While loop, the iSafety variable is incremented by one to count the number of repetitions of the loop.</li>
 <li>When the value of iSafety reaches 10, the While statement
     becomes false and the loop no longer executes.</li>
</ul>

<p>A second example of the use of the While statement follows. This example
could be used to move down through a menu until a specific item is found.</p>

<h3>Example 3: Looping through a menu</h3>

<p class="Code">Var<br>
int iExitLoop,<br>
string sSearch<br>
let iExitLoop = 0; set the value of the variable to zero<br>
let sSearch = “Open”; assign the string value of &quot;Open&quot; to the sSearch variable<br>
TypeKey (“ALT+F”); Activates the file menu<br>
While iExitLoop == 0<br>
NextLine (); Moves the position to the next line<br>
If StringContains (GetLine (), sSearch) == TRUE Then; We found the word &quot;Open&quot; in the menu item<br>
EnterKey (); Passes the ENTER key through to the application just like pressing it from the keyboard<br>
let iExitLoop = 1; Set the value of the iExitLoop variable to 1. This will end the loop<br>
EndIf<br>
EndWhile</p>

<p>In the above example, two variables are set before the While loop begins. </p>

<ul>
 <li>The value of the iExitLoop variable is set to zero.</li>
 <li>The value of the sSearch variable is then set to the value of “Open”. The sSearch variable contains the
     string of text you want to locate in the menu item as you move down
     through the menu.</li>
 <li>The While loop repeats until the value of iExitLoop changes from zero to one.</li>
 <li>The first statement in the while loop, NextLine, moves the active cursor down one line.</li>
 <li>After the cursor is moved, the String Contains function checks to see if the
     highlighted menu item contains the string, “Open.”</li>
 <li>If “Open” is found in the menu item, then the If statement is found to be true and
     the value of iExitLoop is changed from zero to one.</li>
 <li>When the value of iExitLoop becomes one, the While
     statement will no longer be true and the loop will stop executing.</li>
</ul>

<p>If running the above script, it is possible JAWS could end up in an infinite
loop. If the file menu does not have an option with the word, &quot;Open&quot;
in it, the value of the iExitLoop variable will never
be set to one. This means the While statement will always be true and the loop
will never end. In order to prevent this from happening, we need to let the iExitLoop variable act as a counter that will reach a
certain value and cause the loop to end. Here is the example written again
using a counter to insure the loop will end, even if the word, &quot;Open&quot;
is not found in the menu.</p>

<h3>Example 4: Using a counter to end a loop</h3>

<p class="Code">Var<br>
int iExitLoop,<br>
string sSearch<br>
let iExitLoop = 0; set the value of the variable to zero<br>
let sSearch = "Open"; assign the string value of &quot;Open&quot; to the sSearch variable<br>
TypeKey ("ALT+F"); Activates the file menu<br>
While iExitLoop &lt; 15; This insures the loop will be forced to end after 15 iterations if &quot;Open&quot; is not found<br>
NextLine (); Moves the position to the next line<br>
If StringContains (GetLine (), sSearch) == TRUE Then; We found the word &quot;Open&quot; in the menu item<br>
EnterKey (); Passes the ENTER key through to the application just like pressing it from the keyboard<br>
let iExitLoop = 15; Set the value of the iExitLoop variable to 15. This will end the loop<br>
EndIf<br>
let iExitLoop = iExitLoop + 1; Increases the value of iExitLoop by 1. When the value becomes 15, the loop will end (even if "Open" was not found in the menu.)</br>
EndWhile</p>

<p>This example differs from the previous example in the following ways: </p>

<ul>
 <li>The While statement runs as long as the value of iExitLoop is less than 15.</li>
 <li>If the word, &quot;Open&quot; is found in a menu item, the value of iExitLoop is set to 15. This insures the loop will end.</li>
 <li>During each iteration of the loop, the value of iExitLoop is incremented by one. This means that even if the search string is not
     found, the loop will end when iExitLoop is incremented to 15.</li>
</ul>

<p>&nbsp;</p>

<table>
 <tr>
  <td>
  <p><a href="javascript:window.history.go(-1);" accesskey="b">Back</a></p>
  </td>
  <td></td>
  <td>
<p><a href="09-8_ChapterExercises.htm" accesskey="x">Next</a></p>
  </td>
 </tr>
</table>

</body>

</html>
